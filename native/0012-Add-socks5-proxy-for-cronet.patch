--- a/components/cronet/cronet_global_state.h
+++ b/components/cronet/cronet_global_state.h
@@ -33,6 +33,9 @@ void PostTaskToInitThread(const base::Lo
 // idempotent, and must complete initialization before returning.
 void EnsureInitialized();
 
+std::unique_ptr<net::ProxyConfigService> CreateFixedProxyConfigService(
+    const scoped_refptr<base::SequencedTaskRunner>& io_task_runner, base::StringPiece uri);
+
 // Creates a proxy config service appropriate for this platform that fetches the
 // system proxy settings. Cronet will call this API only after a prior call
 // to EnsureInitialized() has returned.
--- a/components/cronet/cronet_global_state_stubs.cc
+++ b/components/cronet/cronet_global_state_stubs.cc
@@ -59,6 +59,12 @@ void PostTaskToInitThread(const base::Lo
   InitTaskRunner()->PostTask(posted_from, std::move(task));
 }
 
+std::unique_ptr<net::ProxyConfigService> CreateFixedProxyConfigService(
+    const scoped_refptr<base::SequencedTaskRunner>& io_task_runner, base::StringPiece uri) {
+  return net::ConfiguredProxyResolutionService::CreateFixedSystemProxyConfigService(
+      io_task_runner, uri);
+}
+
 std::unique_ptr<net::ProxyConfigService> CreateProxyConfigService(
     const scoped_refptr<base::SequencedTaskRunner>& io_task_runner) {
   return net::ConfiguredProxyResolutionService::CreateSystemProxyConfigService(
--- a/components/cronet/cronet_url_request_context.cc
+++ b/components/cronet/cronet_url_request_context.cc
@@ -178,6 +178,19 @@ CronetURLRequestContext::NetworkTasks::~
   }
 }
 
+void CronetURLRequestContext::InitRequestContextOnInitThreadWithUri(base::StringPiece uri) {
+  DCHECK(OnInitThread());
+  auto proxy_config_service =
+      cronet::CreateFixedProxyConfigService(GetNetworkTaskRunner(), uri);
+  g_net_log.Get().EnsureInitializedOnInitThread();
+  GetNetworkTaskRunner()->PostTask(
+      FROM_HERE,
+      base::BindOnce(&CronetURLRequestContext::NetworkTasks::Initialize,
+                     base::Unretained(network_tasks_), GetNetworkTaskRunner(),
+                     GetFileThread()->task_runner(),
+                     std::move(proxy_config_service)));
+}
+
 void CronetURLRequestContext::InitRequestContextOnInitThread() {
   DCHECK(OnInitThread());
   auto proxy_config_service =
--- a/components/cronet/cronet_url_request_context.h
+++ b/components/cronet/cronet_url_request_context.h
@@ -104,6 +104,8 @@ class CronetURLRequestContext {
   // Blocks until network thread is destroyed after running all pending tasks.
   virtual ~CronetURLRequestContext();
 
+  void InitRequestContextOnInitThreadWithUri(base::StringPiece uri);
+
   // Called on init thread to initialize URLRequestContext.
   void InitRequestContextOnInitThread();
 
--- a/components/cronet/native/engine.cc
+++ b/components/cronet/native/engine.cc
@@ -198,10 +198,17 @@ Cronet_RESULT Cronet_EngineImpl::StartWi
   // @VisibleForTesting (as the only external use will be in a test).
 
   // Initialize context on the init thread.
+  if (params->envoy_url.rfind("socks5://", 0) != 0) {
   cronet::PostTaskToInitThread(
       FROM_HERE,
       base::BindOnce(&CronetURLRequestContext::InitRequestContextOnInitThread,
                      base::Unretained(context_.get())));
+  } else {
+      cronet::PostTaskToInitThread(
+          FROM_HERE,
+          base::BindOnce(&CronetURLRequestContext::InitRequestContextOnInitThreadWithUri,
+                         base::Unretained(context_.get()), params->envoy_url));
+  }
   return CheckResult(Cronet_RESULT_SUCCESS);
 }
 
--- a/net/proxy_resolution/configured_proxy_resolution_service.cc
+++ b/net/proxy_resolution/configured_proxy_resolution_service.cc
@@ -1390,6 +1390,20 @@ bool ConfiguredProxyResolutionService::C
   return true;
 }
 
+std::unique_ptr<ProxyConfigService>
+ConfiguredProxyResolutionService::CreateFixedSystemProxyConfigService(
+    const scoped_refptr<base::SequencedTaskRunner>& main_task_runner, base::StringPiece uri) {
+  ProxyConfig raw_proxy_config;
+  raw_proxy_config.proxy_rules().type = ProxyConfig::ProxyRules::Type::PROXY_LIST;
+  raw_proxy_config.proxy_rules().single_proxies.SetSingleProxyServer(ProxyServer::FromURI(uri, ProxyServer::SCHEME_SOCKS5));
+#if (!defined(OS_WIN) && !defined(OS_LINUX)) || defined(OS_CHROMEOS)
+  ProxyConfigWithAnnotation proxy_config = ProxyConfigWithAnnotation(raw_proxy_config, NO_TRAFFIC_ANNOTATION_YET);
+#else
+  ProxyConfigWithAnnotation proxy_config = ProxyConfigWithAnnotation(raw_proxy_config, kSystemProxyConfigTrafficAnnotation);
+#endif
+  return std::make_unique<ProxyConfigServiceFixed>(proxy_config);
+}
+
 // static
 std::unique_ptr<ProxyConfigService>
 ConfiguredProxyResolutionService::CreateSystemProxyConfigService(
--- a/net/proxy_resolution/configured_proxy_resolution_service.h
+++ b/net/proxy_resolution/configured_proxy_resolution_service.h
@@ -222,6 +222,9 @@ class NET_EXPORT ConfiguredProxyResoluti
       const std::string& pac_string,
       const NetworkTrafficAnnotationTag& traffic_annotation);
 
+  static std::unique_ptr<ProxyConfigService> CreateFixedSystemProxyConfigService(
+      const scoped_refptr<base::SequencedTaskRunner>& main_task_runner, base::StringPiece uri);
+
   // Creates a config service appropriate for this platform that fetches the
   // system proxy settings. |main_task_runner| is the thread where the consumer
   // of the ProxyConfigService will live.
--- a/components/cronet/android/cronet_library_loader.cc
+++ b/components/cronet/android/cronet_library_loader.cc
@@ -183,6 +183,17 @@ std::unique_ptr<net::ProxyConfigService>
   return service;
 }
 
+std::unique_ptr<net::ProxyConfigService> CreateFixedProxyConfigService(
+    const scoped_refptr<base::SequencedTaskRunner>& io_task_runner, base::StringPiece uri) {
+  std::unique_ptr<net::ProxyConfigService> service =
+      net::ConfiguredProxyResolutionService::CreateFixedSystemProxyConfigService(
+          io_task_runner, uri);
+  //net::ProxyConfigServiceAndroid* android_proxy_config_service =
+  //  static_cast<net::ProxyConfigServiceAndroid*>(service.get());
+  //android_proxy_config_service->set_exclude_pac_url(true);
+  return service;
+}
+
 // Creates a proxy resolution service appropriate for this platform.
 std::unique_ptr<net::ProxyResolutionService> CreateProxyResolutionService(
     std::unique_ptr<net::ProxyConfigService> proxy_config_service,
--- a/components/cronet/ios/cronet_global_state_ios.mm
+++ b/components/cronet/ios/cronet_global_state_ios.mm
@@ -72,6 +72,11 @@ std::unique_ptr<net::ProxyConfigService>
   return nullptr;
 }
 
+std::unique_ptr<net::ProxyConfigService> CreateFixedProxyConfigService(
+    const scoped_refptr<base::SequencedTaskRunner>& io_task_runner, base::StringPiece uri) {
+  return nullptr;
+}
+
 std::unique_ptr<net::ProxyResolutionService> CreateProxyResolutionService(
     std::unique_ptr<net::ProxyConfigService> proxy_config_service,
     net::NetLog* net_log) {
--- a/components/cronet/native/sample/main.cc
+++ b/components/cronet/native/sample/main.cc
@@ -30,6 +30,7 @@ Cronet_EnginePtr CreateCronetEngine() {
       "envoy://"
       "?url=https%3A%2F%2Fexample.com%2Fenvoy_path%2F%3Fk1%3Dv1&header_Host="
       "subdomain.example.com&address=1.2.3.4&disabled_cipher_suites=0xc024,0xc02f");
+  Cronet_EngineParams_envoy_url_set(engine_params, "socks5://127.0.0.1:1080");
 
   Cronet_EngineParams_enable_quic_set(engine_params, true);
 
--- a/components/cronet/BUILD.gn
+++ b/components/cronet/BUILD.gn
@@ -100,6 +100,27 @@ if (is_android) {
     testonly = true
     deps = [ "//components/cronet/android:cronet_package_android" ]
   }
+  executable("cronet_sample") {
+    testonly = true
+    sources = [
+      "native/sample/main.cc",
+      "native/sample/sample_executor.cc",
+      "native/sample/sample_executor.h",
+      "native/sample/sample_url_request_callback.cc",
+      "native/sample/sample_url_request_callback.h",
+
+      "cronet_global_state_stubs.cc",
+    ]
+    deps = [
+      "//base",
+      "//net",
+      "//components/cronet/native:cronet_native_headers",
+      "//components/cronet/native:cronet_native_impl",
+    ]
+    if ((is_linux || is_chromeos) && !is_component_build) {
+      public_configs = [ "//build/config/gcc:rpath_for_built_shared_libraries" ]
+    }
+  }
 } else if (is_ios) {
   group("cronet_package") {
     deps = [ "//components/cronet/ios:cronet_package_ios" ]
