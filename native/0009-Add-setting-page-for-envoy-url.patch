From: h <h@localhost>
Date: Sat, 30 May 2020 09:13:54 +0000
Subject: [PATCH 1/1] Add envoy settings to chrome://settings/security

---
 chrome/app/resources/generated_resources_zh-CN.xtb |   4 +-
 chrome/app/settings_strings.grdp                   |   8 ++
 .../extensions/api/settings_private/prefs_util.cc  |   2 +
 .../resources/settings/privacy_page/BUILD.gn       |  67 +++++++++++++
 .../resources/settings/privacy_page/envoy.html     |  35 +++++++
 .../resources/settings/privacy_page/envoy.js       |  80 +++++++++++++++
 .../settings/privacy_page/envoy_input.html         |  29 ++++++
 .../resources/settings/privacy_page/envoy_input.js |  83 ++++++++++++++++
 .../settings/privacy_page/privacy_page.html        |   4 +
 .../settings/privacy_page/privacy_page.js          |  12 +++
 .../privacy_page/privacy_page_browser_proxy.js     |  30 ++++++
 .../settings/privacy_page/security_page.html       |   4 +
 .../settings/privacy_page/security_page.js         |  12 +++
 chrome/browser/resources/settings/settings.gni     |   1 +
 .../resources/settings/settings_resources.grd      |  12 +++
 .../resources/settings/settings_resources_v3.grdp  |   9 ++
 chrome/browser/ui/BUILD.gn                         |   2 +
 .../ui/webui/settings/settings_envoy_handler.cc    | 109 +++++++++++++++++++++
 .../ui/webui/settings/settings_envoy_handler.h     |  58 +++++++++++
 .../settings_localized_strings_provider.cc         |   4 +
 chrome/browser/ui/webui/settings/settings_ui.cc    |   2 +
 chrome/common/chrome_features.cc                   |   4 +
 chrome/common/chrome_features.h                    |   2 +
 .../settings/test_privacy_page_browser_proxy.js    |  14 +++
 24 files changed, 586 insertions(+), 1 deletion(-)

--- a/chrome/app/resources/generated_resources_zh-CN.xtb
+++ b/chrome/app/resources/generated_resources_zh-CN.xtb
@@ -7026,4 +7026,6 @@
 <translation id="998747458861718449">检查(&amp;N)</translation>
 <translation id="3558311757436544135">Envoy 选项</translation>
 <translation id="55773412430883023">配置 envoy</translation>
+<translation id="5323246628081704591">使用 envoy</translation>
+<translation id="4792296746768126668">输入 envoy url</translation>
 </translationbundle>
--- a/chrome/app/settings_strings.grdp
+++ b/chrome/app/settings_strings.grdp
@@ -1407,6 +1407,14 @@
   <message name="IDS_SETTINGS_MANAGE_CERTIFICATES_DESCRIPTION" desc="Secondary, continued explanation of how to manage SSL certificates and settings in Privacy options">
     Manage HTTPS/SSL certificates and settings
   </message>
+  <if expr="is_win or is_macosx or desktop_linux or chromeos">
+    <message name="IDS_SETTINGS_ENVOY" desc="Text for envoy options">
+      Use envoy
+    </message>
+    <message name="IDS_SETTINGS_ENVOY_URL_PLACEHOLDER" desc="Placeholder text for a textbox where users can enter a envoy url">
+      Enter envoy url
+    </message>
+  </if>
   <message name="IDS_SETTINGS_SECURE_DNS" desc="Text for secure DNS toggle in Privacy options">
     Use secure DNS
   </message>
--- a/chrome/browser/extensions/api/settings_private/prefs_util.cc
+++ b/chrome/browser/extensions/api/settings_private/prefs_util.cc
@@ -259,6 +259,8 @@ const PrefsUtil::TypedPrefMap& PrefsUtil
   (*s_allowlist)[::prefs::kDnsOverHttpsTemplates] =
       settings_api::PrefType::PREF_TYPE_STRING;
 
+  (*s_allowlist)[::prefs::kEnvoyUrl] = settings_api::PrefType::PREF_TYPE_STRING;
+
   // Security page
   (*s_allowlist)[::kGeneratedPasswordLeakDetectionPref] =
       settings_api::PrefType::PREF_TYPE_BOOLEAN;
--- a/chrome/browser/resources/settings/privacy_page/BUILD.gn
+++ b/chrome/browser/resources/settings/privacy_page/BUILD.gn
@@ -50,6 +50,8 @@ js_type_check("closure_compile_module")
     ":privacy_page_browser_proxy.m",
     ":secure_dns",
     ":secure_dns_input",
+    ":envoy",
+    ":envoy_input",
     ":security_keys_bio_enroll_dialog",
     ":security_keys_browser_proxy",
     ":security_keys_credential_management_dialog",
@@ -103,6 +105,26 @@ js_library("secure_dns_input") {
   ]
 }
 
+js_library("envoy") {
+  deps = [
+    ":privacy_page_browser_proxy.m",
+    "..:i18n_setup",
+    "../prefs:prefs_behavior.m",
+    "//third_party/polymer/v3_0/components-chromium/polymer:polymer_bundled",
+    "//ui/webui/resources/js:web_ui_listener_behavior.m",
+  ]
+}
+
+js_library("envoy_input") {
+  deps = [
+    ":privacy_page_browser_proxy.m",
+    "..:i18n_setup",
+    "//third_party/polymer/v3_0/components-chromium/polymer:polymer_bundled",
+  ]
+}
+
+
+
 js_library("disable_safebrowsing_dialog") {
   deps = [
     "//third_party/polymer/v3_0/components-chromium/polymer:polymer_bundled",
@@ -258,6 +280,8 @@ html_to_js("v3_ready_elements") {
     "privacy_page.js",
     "secure_dns.js",
     "secure_dns_input.js",
+    "envoy.js",
+    "envoy_input.js",
     "security_keys_bio_enroll_dialog.js",
     "security_keys_credential_management_dialog.js",
     "security_keys_pin_field.js",
--- /dev/null
+++ b/chrome/browser/resources/settings/privacy_page/envoy.html
@@ -0,0 +1,15 @@
+i    <style include="settings-shared md-select">
+      #envoyInput {
+        margin-top: 6px;
+      }
+    </style>
+    <div class="cr-row">
+      <div class="flex cr-padded-text" aria-hidden="true">
+        $i18n{envoy}
+      </div>
+      <envoy-input id="envoyInput"
+           value="[[envoyInputValue_]]"
+           on-value-update="onEnvoyInputEvaluated_"
+           >
+      </envoy-input>
+    </div>
--- /dev/null
+++ b/chrome/browser/resources/settings/privacy_page/envoy.js
@@ -0,0 +1,98 @@
+// Copyright 2020 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+/**
+ * @fileoverview 'settings-envoy' is a setting that allows the envoy url
+ * to be configured.
+ *
+ * The underlying envoy prefs are not read directly since the setting is
+ * meant to represent the current state of the host resolver, which depends not
+ * only on the prefs but also a few other factors (e.g. whether we've detected a
+ * managed environment, whether we've detected parental controls, etc). Instead,
+ * the setting listens for envoy-setting-changed events, which are sent
+ * by PrivacyPageBrowserProxy and describe the new host resolver configuration.
+ */
+import 'chrome://resources/cr_elements/cr_radio_button/cr_radio_button.m.js';
+import 'chrome://resources/cr_elements/cr_radio_group/cr_radio_group.m.js';
+import 'chrome://resources/cr_elements/md_select_css.m.js';
+import '../controls/settings_toggle_button.m.js';
+import '../prefs/prefs.m.js';
+import '../settings_shared_css.m.js';
+import './envoy_input.js';
+
+import {assertNotReached} from 'chrome://resources/js/assert.m.js';
+import {WebUIListenerBehavior} from 'chrome://resources/js/web_ui_listener_behavior.m.js';
+import {html, Polymer} from 'chrome://resources/polymer/v3_0/polymer/polymer_bundled.min.js';
+
+import {loadTimeData} from '../i18n_setup.js';
+import {PrefsBehavior} from '../prefs/prefs_behavior.m.js';
+
+import {PrivacyPageBrowserProxy, PrivacyPageBrowserProxyImpl, ResolverOption, SecureDnsMode, SecureDnsSetting, SecureDnsUiManagementMode, EnvoySetting} from './privacy_page_browser_proxy.m.js';
+
+Polymer({
+  is: 'settings-envoy',
+
+  _template: html`{__html_template__}`,
+
+  behaviors: [WebUIListenerBehavior, PrefsBehavior],
+
+  properties: {
+    /**
+     * Preferences state.
+     */
+    prefs: {
+      type: Object,
+      notify: true,
+    },
+
+    /**
+     * String to display in the custom text field.
+     * @private
+     */
+    envoyInputValue_: String,
+  },
+
+  /** @private {?PrivacyPageBrowserProxy} */
+  browserProxy_: null,
+
+  /** @override */
+  created: function() {
+    this.browserProxy_ = PrivacyPageBrowserProxyImpl.getInstance();
+  },
+
+  /** @override */
+  attached: function() {
+      this.browserProxy_.getEnvoySetting().then(
+          this.onEnvoyPrefsChanged_.bind(this));
+  },
+
+  onEnvoyPrefsChanged_: function(setting) {
+      this.envoyInputValue_ = setting.envoyUrl;
+  },
+
+  /**
+   * Helper method for updating the underlying envoy prefs based on the
+   * provided envoy url. The envoyUrl
+   * param should only be specified when the underlying prefs are being updated
+   * after a custom entry has been validated.
+   * @param {string=} envoyUrl
+   * @private
+   */
+  updateEnvoyPrefs_: function(envoyUrl = '') {
+      this.setPrefValue('envoy.envoy_url', envoyUrl);
+  },
+
+  /**
+   * Updates the underlying prefs if a custom entry was determined to be valid.
+   * If the custom entry was determined to be invalid, moves the selected radio
+   * button away from 'secure' if necessary.
+   * @param {!CustomEvent<!{text: string, isValid: boolean}>} event
+   * @private
+   */
+  onEnvoyInputEvaluated_: function(event) {
+    if (event.detail.isValid) {
+      this.updateEnvoyPrefs_(event.detail.text);
+    }
+  },
+});
--- /dev/null
+++ b/chrome/browser/resources/settings/privacy_page/envoy_input.html
@@ -0,0 +1,18 @@
+    <style>
+      :host {
+        cursor: auto;
+        display: block;
+        width: 100%;
+      }
+
+      cr-input {
+        width: 80%;
+        --cr-input-width: 75%;
+      }
+    </style>
+    <!-- Max length of 100 KB to prevent browser from freezing. -->
+    <cr-input id="input" value="{{value}}"
+        placeholder="$i18n{envoyUrlPlaceholder}" invalid="[[showError_]]"
+        error-message="[[errorText_]]" maxlength="102400" spellcheck="false"
+        on-input="onInput_" on-blur="validate">
+    </cr-input>
--- /dev/null
+++ b/chrome/browser/resources/settings/privacy_page/envoy_input.js
@@ -0,0 +1,93 @@
+// Copyright 2020 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+/**
+ * @fileoverview `envoy-input` is a single-line text field that is used
+ * with the envoy setting to configure custom servers. It is based on
+ * `home-url-input`.
+ */
+import 'chrome://resources/cr_elements/cr_input/cr_input.m.js';
+
+import {html, Polymer} from 'chrome://resources/polymer/v3_0/polymer/polymer_bundled.min.js';
+
+import {loadTimeData} from '../i18n_setup.js';
+
+import {PrivacyPageBrowserProxy, PrivacyPageBrowserProxyImpl} from './privacy_page_browser_proxy.m.js';
+
+Polymer({
+  is: 'envoy-input',
+
+  _template: html`{__html_template__}`,
+
+  properties: {
+    /*
+     * The value of the input field.
+     */
+    value: String,
+
+    /*
+     * Whether |errorText| should be displayed beneath the input field.
+     * @private
+     */
+    showError_: Boolean,
+
+    /**
+     * The error text to display beneath the input field when |showError_| is
+     * true.
+     * @private
+     */
+    errorText_: String,
+  },
+
+  /** @private {?PrivacyPageBrowserProxy} */
+  browserProxy_: null,
+
+  /** @override */
+  created: function() {
+    this.browserProxy_ = PrivacyPageBrowserProxyImpl.getInstance();
+  },
+
+  /**
+   * This function ensures that while the user is entering input, especially
+   * after pressing Enter, the input is not prematurely marked as invalid.
+   * @private
+   */
+  onInput_: function() {
+    this.showError_ = false;
+  },
+
+  /**
+   * When the custom input field loses focus, validate the current value and
+   * trigger an event with the result. If the value is valid, also attempt a
+   * test query. Show an error message if the tested value is still the most
+   * recent value, is non-empty, and was either invalid or failed the test
+   * query.
+   * @private
+   */
+  validate: async function() {
+    this.showError_ = true;
+    const valueToValidate = this.value;
+    var valid = false;
+    if (await this.browserProxy_.setEnvoyUrl(valueToValidate)) {
+	 this.showError_ = false;
+	 valid = true;
+    }
+    this.fire('value-update', {isValid: valid, text: valueToValidate});
+  },
+
+  /**
+   * Focus the custom dns input field.
+   */
+  focus: function() {
+    this.$.input.focus();
+  },
+
+  /**
+   * Returns whether an error is being shown.
+   * @return {boolean}
+   */
+  isInvalid: function() {
+    return !!this.showError_;
+  },
+});
--- a/chrome/browser/resources/settings/privacy_page/privacy_page.js
+++ b/chrome/browser/resources/settings/privacy_page/privacy_page.js
@@ -198,6 +198,18 @@ Polymer({
     siteDataFilter_: String,
 
     /**
+     * Whether the envoy setting should be displayed.
+     * @private
+     */
+    showEnvoySetting_: {
+      type: Boolean,
+      readOnly: true,
+      value: function() {
+        return loadTimeData.getBoolean('showEnvoySetting');
+      },
+    },
+
+    /**
      * Boolean which keeps a track if any of the displayed lists has discarded
      * content setting patterns and hides the warning message accordingly.
      * @private
--- a/chrome/browser/resources/settings/privacy_page/privacy_page_browser_proxy.js
+++ b/chrome/browser/resources/settings/privacy_page/privacy_page_browser_proxy.js
@@ -46,6 +46,14 @@ cr.define('settings', function() {
    */
   /* #export */ let SecureDnsSetting;
 
+  /**
+   * @typedef {{
+   *   envoyUrl: string
+   * }}
+   */
+
+  /* #export */ let EnvoySetting;
+
   /** @interface */
   /* #export */ class PrivacyPageBrowserProxy {
     // <if expr="_google_chrome and not chromeos">
@@ -72,6 +80,17 @@ cr.define('settings', function() {
     /** @return {!Promise<!settings.SecureDnsSetting>} */
     getSecureDnsSetting() {}
 
+    /** @return {!Promise<!settings.EnvoySetting>} */
+    getEnvoySetting() {}
+
+    /**
+     * Returns True if envoy url is set
+     * or was cancelled.
+     * @param {string} envoyUrl
+     * @return {!Promise<boolean>}
+     */
+     setEnvoyUrl(envoyUrl) {}
+
     /**
      * Returns the URL templates, if they are all valid.
      * @param {string} entry
@@ -135,6 +154,16 @@ cr.define('settings', function() {
     }
 
     /** @override */
+    setEnvoyUrl(envoyUrl) {
+      return cr.sendWithPromise('setEnvoyUrl', envoyUrl);
+    }
+
+    /** @override */
+    getEnvoySetting() {
+      return cr.sendWithPromise('getEnvoySetting');
+    }
+
+    /** @override */
     parseCustomDnsEntry(entry) {
       return cr.sendWithPromise('parseCustomDnsEntry', entry);
     }
@@ -162,5 +191,6 @@ cr.define('settings', function() {
     SecureDnsMode,
     SecureDnsUiManagementMode,
     SecureDnsSetting,
+    EnvoySetting,
   };
 });
--- a/chrome/browser/resources/settings/privacy_page/security_page.html
+++ b/chrome/browser/resources/settings/privacy_page/security_page.html
@@ -155,6 +155,9 @@
     <template is="dom-if" if="[[showSecureDnsSetting_]]">
       <settings-secure-dns prefs="{{prefs}}"></settings-secure-dns>
     </template>
+    <template is="dom-if" if="[[showEnvoySetting_]]">
+      <settings-envoy prefs="{{prefs}}"></settings-envoy>
+    </template>
     <template is="dom-if" if="[[enableSecurityKeysSubpage_]]">
         <cr-link-row id="security-keys-subpage-trigger"
           class="hr"
--- a/chrome/browser/resources/settings/privacy_page/security_page.js
+++ b/chrome/browser/resources/settings/privacy_page/security_page.js
@@ -9,6 +9,7 @@ import 'chrome://resources/cr_elements/s
 import './collapse_radio_button.js';
 import './disable_safebrowsing_dialog.js';
 import './secure_dns.js';
+import './envoy.js';
 import '../controls/settings_toggle_button.m.js';
 import '../icons.m.js';
 import '../prefs/prefs.m.js';
@@ -75,6 +76,18 @@ Polymer({
       },
     },
 
+    /**
+     * Whether the envoy setting should be displayed.
+     * @private
+     */
+    showEnvoySetting_: {
+      type: Boolean,
+      readOnly: true,
+      value: function() {
+        return loadTimeData.getBoolean('showEnvoySetting');
+      },
+    },
+
     /**
      * Valid safe browsing states.
      * @private
--- a/chrome/browser/resources/settings/settings.gni
+++ b/chrome/browser/resources/settings/settings.gni
@@ -80,6 +80,7 @@ settings_namespace_rewrites = [
   "settings.SearchResult|SearchResult",
   "settings.SecureDnsMode|SecureDnsMode",
   "settings.SecureDnsSetting|SecureDnsSetting",
+  "settings.EnvoySetting|EnvoySetting",
   "settings.SecureDnsUiManagementMode|SecureDnsUiManagementMode",
   "settings.SecurityKeysBioEnrollProxy|SecurityKeysBioEnrollProxy",
   "settings.SecurityKeysCredentialBrowserProxy|SecurityKeysCredentialBrowserProxy",
--- a/chrome/browser/resources/settings/settings_resources_v3.grdp
+++ b/chrome/browser/resources/settings/settings_resources_v3.grdp
@@ -525,6 +525,14 @@
            file="${root_gen_dir}/chrome/browser/resources/settings/privacy_page/secure_dns_input.js"
            use_base_dir="false"
            type="BINDATA" />
+  <include name="IDR_SETTINGS_PRIVACY_PAGE_ENVOY_JS"
+           file="${root_gen_dir}/chrome/browser/resources/settings/privacy_page/envoy.js"
+           use_base_dir="false"
+           type="BINDATA" />
+  <include name="IDR_SETTINGS_PRIVACY_PAGE_ENVOY_INPUT_JS"
+           file="${root_gen_dir}/chrome/browser/resources/settings/privacy_page/envoy_input.js"
+           use_base_dir="false"
+           type="BINDATA" />
   <include name="IDR_SETTINGS_PRIVACY_PAGE_SECURITY_PAGE_JS"
            file="${root_gen_dir}/chrome/browser/resources/settings/privacy_page/security_page.js"
            use_base_dir="false"
--- a/chrome/browser/ui/BUILD.gn
+++ b/chrome/browser/ui/BUILD.gn
@@ -1439,6 +1439,8 @@ static_library("ui") {
       "webui/settings/settings_clear_browsing_data_handler.h",
       "webui/settings/settings_cookies_view_handler.cc",
       "webui/settings/settings_cookies_view_handler.h",
+      "webui/settings/settings_envoy_handler.cc",
+      "webui/settings/settings_envoy_handler.h",
       "webui/settings/settings_localized_strings_provider.cc",
       "webui/settings/settings_localized_strings_provider.h",
       "webui/settings/settings_media_devices_selection_handler.cc",
--- a/chrome/browser/resources/settings/BUILD.gn
+++ b/chrome/browser/resources/settings/BUILD.gn
@@ -189,6 +189,8 @@ if (optimize_webui) {
       "privacy_page/privacy_page_browser_proxy.m.js",
       "privacy_page/secure_dns.js",
       "privacy_page/secure_dns_input.js",
+      "privacy_page/envoy.js",
+      "privacy_page/envoy_input.js",
       "privacy_page/security_page.js",
       "privacy_page/disable_safebrowsing_dialog.js",
       "privacy_page/security_keys_bio_enroll_dialog.js",
--- /dev/null
+++ b/chrome/browser/ui/webui/settings/settings_envoy_handler.cc
@@ -0,0 +1,109 @@
+// Copyright 2020 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#include "chrome/browser/ui/webui/settings/settings_envoy_handler.h"
+
+#include <memory>
+#include <utility>
+
+#include "base/bind.h"
+#include "base/rand_util.h"
+#include "chrome/browser/browser_process.h"
+#include "chrome/browser/net/system_network_context_manager.h"
+#include "chrome/common/chrome_features.h"
+#include "chrome/common/pref_names.h"
+#include "chrome/grit/generated_resources.h"
+#include "components/prefs/pref_service.h"
+#include "content/public/browser/browser_context.h"
+#include "content/public/browser/storage_partition.h"
+#include "content/public/browser/web_contents.h"
+#include "content/public/browser/web_ui.h"
+#include "net/dns/public/util.h"
+#include "ui/base/l10n/l10n_util.h"
+
+namespace settings {
+
+namespace {
+
+std::unique_ptr<base::DictionaryValue> CreateEnvoySettingDict() {
+  auto dict = std::make_unique<base::DictionaryValue>();
+  auto envoy_url =
+      g_browser_process->local_state()->GetString(::prefs::kEnvoyUrl);
+  dict->SetString("envoyUrl", envoy_url);
+  return dict;
+}
+
+}  // namespace
+
+EnvoyHandler::EnvoyHandler()
+    : network_context_getter_(
+          base::BindRepeating(&EnvoyHandler::GetNetworkContext,
+                              base::Unretained(this))) {}
+
+EnvoyHandler::~EnvoyHandler() = default;
+
+void EnvoyHandler::RegisterMessages() {
+  web_ui()->RegisterMessageCallback(
+      "getEnvoySetting",
+      base::BindRepeating(&EnvoyHandler::HandleGetEnvoySetting,
+                          base::Unretained(this)));
+  web_ui()->RegisterMessageCallback(
+      "setEnvoyUrl", base::BindRepeating(&EnvoyHandler::HandleSetEnvoyUrl,
+                                         base::Unretained(this)));
+}
+
+void EnvoyHandler::OnJavascriptAllowed() {
+  // Register for updates to the underlying envoy prefs so that the
+  // envoy setting can be updated to reflect the current host resolver
+  // configuration.
+  pref_registrar_.Init(g_browser_process->local_state());
+  pref_registrar_.Add(
+      prefs::kEnvoyUrl,
+      base::Bind(&EnvoyHandler::SendEnvoySettingUpdatesToJavascript,
+                 base::Unretained(this)));
+}
+
+void EnvoyHandler::OnJavascriptDisallowed() {
+  pref_registrar_.RemoveAll();
+}
+
+void EnvoyHandler::SetNetworkContextForTesting(
+    network::mojom::NetworkContext* network_context) {
+  network_context_getter_ = base::BindRepeating(
+      [](network::mojom::NetworkContext* network_context) {
+        return network_context;
+      },
+      network_context);
+}
+
+network::mojom::NetworkContext* EnvoyHandler::GetNetworkContext() {
+  return content::BrowserContext::GetDefaultStoragePartition(
+             web_ui()->GetWebContents()->GetBrowserContext())
+      ->GetNetworkContext();
+}
+
+void EnvoyHandler::HandleGetEnvoySetting(const base::ListValue* args) {
+  AllowJavascript();
+  CHECK_EQ(1u, args->GetList().size());
+  const base::Value& callback_id = args->GetList()[0];
+  ResolveJavascriptCallback(callback_id, *CreateEnvoySettingDict());
+}
+
+void EnvoyHandler::HandleSetEnvoyUrl(const base::ListValue* args) {
+  AllowJavascript();
+  CHECK_EQ(2u, args->GetList().size());
+  const base::Value& callback_id = args->GetList()[0];
+  std::string envoy_url;
+  CHECK(args->GetString(1, &envoy_url));
+
+  g_browser_process->local_state()->SetString(::prefs::kEnvoyUrl, envoy_url);
+  ResolveJavascriptCallback(callback_id, base::Value(true));
+}
+
+void EnvoyHandler::SendEnvoySettingUpdatesToJavascript() {
+  FireWebUIListener("envoy-setting-changed", *CreateEnvoySettingDict());
+}
+
+}  // namespace settings
+
--- /dev/null
+++ b/chrome/browser/ui/webui/settings/settings_envoy_handler.h
@@ -0,0 +1,58 @@
+// Copyright 2020 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#ifndef CHROME_BROWSER_UI_WEBUI_SETTINGS_SETTINGS_ENVOY_HANDLER_H_
+#define CHROME_BROWSER_UI_WEBUI_SETTINGS_SETTINGS_ENVOY_HANDLER_H_
+
+#include <map>
+#include <string>
+#include <vector>
+
+#include "base/macros.h"
+#include "base/values.h"
+#include "chrome/browser/net/dns_probe_runner.h"
+#include "chrome/browser/ui/webui/settings/settings_page_ui_handler.h"
+#include "components/prefs/pref_change_registrar.h"
+#include "services/network/public/cpp/resolve_host_client_base.h"
+#include "services/network/public/mojom/network_context.mojom.h"
+
+namespace settings {
+
+// Handler for the Envoy setting.
+class EnvoyHandler : public SettingsPageUIHandler {
+ public:
+  EnvoyHandler();
+  ~EnvoyHandler() override;
+
+  // SettingsPageUIHandler:
+  void RegisterMessages() override;
+  void OnJavascriptAllowed() override;
+  void OnJavascriptDisallowed() override;
+
+  void SetNetworkContextForTesting(
+      network::mojom::NetworkContext* network_context);
+
+ protected:
+  // Intended to be called once upon creation of the envoy setting.
+  void HandleGetEnvoySetting(const base::ListValue* args);
+
+  void HandleSetEnvoyUrl(const base::ListValue* args);
+
+  // Retrieves the current host resolver configuration, computes the
+  // corresponding UI representation, and sends it to javascript.
+  void SendEnvoySettingUpdatesToJavascript();
+
+ private:
+  network::mojom::NetworkContext* GetNetworkContext();
+
+  chrome_browser_net::DnsProbeRunner::NetworkContextGetter
+      network_context_getter_;
+  PrefChangeRegistrar pref_registrar_;
+
+  DISALLOW_COPY_AND_ASSIGN(EnvoyHandler);
+};
+
+}  // namespace settings
+
+#endif  // CHROME_BROWSER_UI_WEBUI_SETTINGS_SETTINGS_ENVOY_HANDLER_H_
--- a/chrome/browser/ui/webui/settings/settings_localized_strings_provider.cc
+++ b/chrome/browser/ui/webui/settings/settings_localized_strings_provider.cc
@@ -1307,6 +1307,8 @@ void AddPrivacyStrings(content::WebUIDat
       {"manageCertificates", IDS_SETTINGS_MANAGE_CERTIFICATES},
       {"manageCertificatesDescription",
        IDS_SETTINGS_MANAGE_CERTIFICATES_DESCRIPTION},
+      {"envoy", IDS_SETTINGS_ENVOY},
+      {"envoyUrlPlaceholder", IDS_SETTINGS_ENVOY_URL_PLACEHOLDER},
       {"secureDns", IDS_SETTINGS_SECURE_DNS},
       {"secureDnsDescription", IDS_SETTINGS_SECURE_DNS_DESCRIPTION},
       {"secureDnsDisabledForManagedEnvironment",
@@ -1482,6 +1484,8 @@ void AddPrivacyStrings(content::WebUIDat
       base::FeatureList::IsEnabled(omnibox::kDocumentProvider));
   html_source->AddBoolean("showSecureDnsSetting",
                           features::kDnsOverHttpsShowUiParam.Get());
+  html_source->AddBoolean("showEnvoySetting",
+                          features::kEnvoyShowUiParam.Get());
 
   // The link to the Advanced Protection Program landing page, with a referrer
   // from Chrome settings.
--- a/chrome/browser/ui/webui/settings/settings_ui.cc
+++ b/chrome/browser/ui/webui/settings/settings_ui.cc
@@ -47,6 +47,7 @@
 #include "chrome/browser/ui/webui/settings/search_engines_handler.h"
 #include "chrome/browser/ui/webui/settings/settings_clear_browsing_data_handler.h"
 #include "chrome/browser/ui/webui/settings/settings_cookies_view_handler.h"
+#include "chrome/browser/ui/webui/settings/settings_envoy_handler.h"
 #include "chrome/browser/ui/webui/settings/settings_localized_strings_provider.h"
 #include "chrome/browser/ui/webui/settings/settings_media_devices_selection_handler.h"
 #include "chrome/browser/ui/webui/settings/settings_page_ui_handler.h"
@@ -221,6 +222,7 @@ SettingsUI::SettingsUI(content::WebUI* w
   AddSettingsPageUIHandler(std::make_unique<ProtocolHandlersHandler>());
   AddSettingsPageUIHandler(std::make_unique<SearchEnginesHandler>(profile));
   AddSettingsPageUIHandler(std::make_unique<SecureDnsHandler>());
+  AddSettingsPageUIHandler(std::make_unique<EnvoyHandler>());
   AddSettingsPageUIHandler(std::make_unique<SiteSettingsHandler>(
       profile, GetRegistrarForProfile(profile)));
   AddSettingsPageUIHandler(std::make_unique<StartupPagesHandler>(web_ui));
--- a/chrome/common/chrome_features.cc
+++ b/chrome/common/chrome_features.cc
@@ -321,6 +321,10 @@ const base::Feature kEnvoy{"Envoy", base
 
 const base::FeatureParam<std::string> kEnvoyUrlParam{&kEnvoy, "EnvoyUrl", ""};
 
+// Sets whether the DoH setting is displayed in the settings UI.
+const base::FeatureParam<bool> kEnvoyShowUiParam{&kEnvoy, "ShowUi",
+                                                 true};
+
 #if defined(OS_ANDROID)
 // Enable changing default downloads storage location on Android.
 const base::Feature kDownloadsLocationChange{"DownloadsLocationChange",
--- a/chrome/common/chrome_features.h
+++ b/chrome/common/chrome_features.h
@@ -204,6 +204,8 @@ COMPONENT_EXPORT(CHROME_FEATURES)
 extern const base::Feature kEnvoy;
 COMPONENT_EXPORT(CHROME_FEATURES)
 extern const base::FeatureParam<std::string> kEnvoyUrlParam;
+COMPONENT_EXPORT(CHROME_FEATURES)
+extern const base::FeatureParam<bool> kEnvoyShowUiParam;
 
 #if defined(OS_ANDROID)
 COMPONENT_EXPORT(CHROME_FEATURES)
--- a/chrome/test/data/webui/settings/test_privacy_page_browser_proxy.js
+++ b/chrome/test/data/webui/settings/test_privacy_page_browser_proxy.js
@@ -3,7 +3,7 @@
 // found in the LICENSE file.
 
 // clang-format off
-import { MetricsReporting,PrivacyPageBrowserProxy, ResolverOption, SecureDnsMode, SecureDnsSetting, SecureDnsUiManagementMode} from 'chrome://settings/settings.js';
+import { MetricsReporting,PrivacyPageBrowserProxy, ResolverOption, SecureDnsMode, SecureDnsSetting, EnvoySetting, SecureDnsUiManagementMode} from 'chrome://settings/settings.js';
 
 import {assertFalse} from '../chai_assert.js';
 import {TestBrowserProxy} from '../test_browser_proxy.m.js';
@@ -41,6 +41,14 @@ export class TestPrivacyPageBrowserProxy
     };
 
     /**
+     * @type {!EnvoySetting}
+     * @private
+     */
+    this.envoySetting = {
+      envoyUrl: "",
+    };
+
+    /**
      * @type {!Array<!ResolverOption>}
      * @private
      */
@@ -101,6 +109,18 @@ export class TestPrivacyPageBrowserProxy
     return Promise.resolve(this.secureDnsSetting);
   }
 
+ /** @override */
+ setEnvoyUrl(envoyUrl) {
+   this.envoySetting.envoyUrl = envoyUrl;
+   return Promise.resolve(true);
+ }
+
+  /** @override */
+  getEnvoySetting() {
+    this.methodCalled('getEnvoySetting');
+    return Promise.resolve(this.envoySetting);
+  }
+
   /**
    * Sets the return value for the next parseCustomDnsEntry call.
    * @param {!Array<string>} parsedEntry
--- a/chrome/browser/resources/settings/settings.js
+++ b/chrome/browser/resources/settings/settings.js
@@ -30,7 +30,7 @@ export {MAX_SIGNIN_PROMO_IMPRESSION} fro
 export {PageStatus, StatusAction, StoredAccount, SyncBrowserProxy, SyncBrowserProxyImpl, SyncStatus} from './people_page/sync_browser_proxy.m.js';
 export {prefToString, stringToPrefValue} from './prefs/pref_util.m.js';
 export {CrSettingsPrefs} from './prefs/prefs_types.m.js';
-export {MetricsReporting, PrivacyPageBrowserProxy, PrivacyPageBrowserProxyImpl, ResolverOption, SecureDnsMode, SecureDnsSetting, SecureDnsUiManagementMode} from './privacy_page/privacy_page_browser_proxy.m.js';
+export {MetricsReporting, PrivacyPageBrowserProxy, PrivacyPageBrowserProxyImpl, ResolverOption, SecureDnsMode, SecureDnsSetting, SecureDnsUiManagementMode, EnvoySetting} from './privacy_page/privacy_page_browser_proxy.m.js';
 export {ResetBrowserProxyImpl} from './reset_page/reset_browser_proxy.js';
 export {buildRouter, routes} from './route.js';
 export {Route, Router} from './router.m.js';
