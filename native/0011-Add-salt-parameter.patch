 net/url_request/url_request_http_job.cc | 17 ++++++++---------
 1 file changed, 8 insertions(+), 9 deletions(-)

diff --git a/net/url_request/url_request_http_job.cc b/net/url_request/url_request_http_job.cc
index 102b6469860d4..64cb6f85d8eac 100644
--- a/net/url_request/url_request_http_job.cc
+++ b/net/url_request/url_request_http_job.cc
@@ -17,7 +17,7 @@
 #include "base/command_line.h"
 #include "base/compiler_specific.h"
 #include "base/file_version_info.h"
-#include "base/hash/md5.h"
+#include "crypto/sha2.h"
 #include "base/location.h"
 #include "base/memory/ptr_util.h"
 #include "base/metrics/field_trial.h"
@@ -564,13 +564,9 @@ void URLRequestHttpJob::StartTransactionInternal() {
           !throttling_entry_->ShouldRejectRequest(*request_)) {
         if (request_->context()->envoy_url().rfind("http://", 0) == 0 ||
             request_->context()->envoy_url().rfind("https://", 0) == 0) {
-          base::MD5Context md5ctx;
-          base::MD5Init(&md5ctx);
-          base::MD5Update(&md5ctx, request_->url().spec());
-          base::MD5Digest digest;
-          base::MD5Final(&digest, &md5ctx);
-          auto md5digest = base::MD5DigestToBase16(digest);
-
+          // https://developer.android.com/reference/android/provider/Settings.Secure.html#ANDROID_ID
+          // default to random value, no cache at all
+          auto salt = base::RandBytesAsString(16);
           auto envoy_url = GURL(request_->context()->envoy_url());
           if (envoy_url.SchemeIsHTTPOrHTTPS()) {
             request_info_.url = envoy_url; // TODO check is_vaid() before set
@@ -585,6 +581,8 @@ void URLRequestHttpJob::StartTransactionInternal() {
                 // see GetUnescapedValue, TODO check is_valid() before set
                 request_info_.url =
                     GURL(net::UnescapeURLComponent(value, UnescapeRule::NORMAL));
+             } else if (key.compare("salt") == 0) {
+                     salt = value;
               } else if (key.rfind(headerPrefix, 0) == 0 &&
                          key.size() > headerPrefixLength) {
                 request_info_.extra_headers.SetHeader(
@@ -594,8 +592,9 @@ void URLRequestHttpJob::StartTransactionInternal() {
           }
 
           // count for cache key
+          auto digest = crypto::SHA256HashString(request_->url().spec() + salt);
           request_info_.url =
-              AppendQueryParameter(request_info_.url, "_digest", md5digest);
+              AppendQueryParameter(request_info_.url, "_digest", digest);
           // TODO encode field value
           request_info_.extra_headers.SetHeader("Url-Orig",
                                                 request_->url().spec());
