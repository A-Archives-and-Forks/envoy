 components/cronet/url_request_context_config.cc | 47 +++++++++++++++++++++++++
 net/base/features.cc                            |  2 +-
 2 files changed, 48 insertions(+), 1 deletion(-)

diff --git a/components/cronet/url_request_context_config.cc b/components/cronet/url_request_context_config.cc
index 6db7ba3482d4d..463716e29fb7c 100644
--- a/components/cronet/url_request_context_config.cc
+++ b/components/cronet/url_request_context_config.cc
@@ -29,6 +29,7 @@
 #include "net/dns/context_host_resolver.h"
 #include "net/dns/host_resolver.h"
 #include "net/dns/mapped_host_resolver.h"
+#include "net/dns/public/dns_protocol.h"
 #include "net/http/http_network_session.h"
 #include "net/http/http_server_properties.h"
 #include "net/log/net_log.h"
@@ -886,6 +887,52 @@ void URLRequestContextConfig::ConfigureURLRequestContextBuilder(
   SetContextBuilderExperimentalOptions(context_builder, &session_params,
                                        quic_context->params(), bound_network);
 
+
+  // ENVOY
+
+  net::DnsConfigOverrides overrides = net::DnsConfigOverrides::CreateOverridingEverythingWithDefaults();
+
+  // force secure DNS
+  overrides.secure_dns_mode = net::SecureDnsMode::kSecure;
+
+  // set DNS.sb, Quad9, and Cloudflare as DoH servers
+  overrides.dns_over_https_config = net::DnsOverHttpsConfig::FromString(R"(
+    {
+      "servers": [{
+        "template": "https://doh.dns.sb/dns-query",
+        "endpoints": [{
+          "ips": ["45.11.45.11"]
+        }, {
+          "ips": ["185.222.222.222"]
+        }]
+      },{
+        "template": "https://dns.quad9.net/dns-query",
+        "endpoints": [{
+          "ips": ["9.9.9.9", "2620:fe::fe"]
+        }, {
+          "ips": ["149.112.112.112", "2620:fe::9"]
+        }]
+      },{
+        "template": "https://chrome.cloudflare-dns.com/dns-query",
+        "endpoints": [{
+          "ips": ["1.1.1.1", "2606:4700:4700::1111"]
+        }, {
+          "ips": ["1.0.0.1", "2606:4700:4700::1001"]
+        }]
+      }]
+    }
+  )");
+
+  net::HostResolver::ManagerOptions host_resolver_manager_options;
+  host_resolver_manager_options.dns_config_overrides = overrides;
+  std::unique_ptr<net::HostResolver> host_resolver;
+  host_resolver = net::HostResolver::CreateStandaloneResolver(
+            net::NetLog::Get(), std::move(host_resolver_manager_options));
+
+  context_builder->set_host_resolver(std::move(host_resolver));
+
+  // END ENVOY
+
   context_builder->set_http_network_session_params(session_params);
   context_builder->set_quic_context(std::move(quic_context));
 
diff --git a/net/base/features.cc b/net/base/features.cc
index 10e0f6848fa11..4ed6fdf9ad4a7 100644
--- a/net/base/features.cc
+++ b/net/base/features.cc
@@ -71,7 +71,7 @@ BASE_FEATURE(kEnableTLS13EarlyData,
 
 BASE_FEATURE(kEncryptedClientHello,
              "EncryptedClientHello",
-             base::FEATURE_DISABLED_BY_DEFAULT);
+             base::FEATURE_ENABLED_BY_DEFAULT);
 
 BASE_FEATURE(kNetworkQualityEstimator,
              "NetworkQualityEstimator",
