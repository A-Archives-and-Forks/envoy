 components/cronet/url_request_context_config.cc | 30 +++++++++++++++++++++++++
 1 file changed, 30 insertions(+)

diff --git a/components/cronet/url_request_context_config.cc b/components/cronet/url_request_context_config.cc
index f96c5dadbedc5..b5001734b351c 100644
--- a/components/cronet/url_request_context_config.cc
+++ b/components/cronet/url_request_context_config.cc
@@ -28,6 +28,7 @@
 #include "net/dns/context_host_resolver.h"
 #include "net/dns/host_resolver.h"
 #include "net/dns/mapped_host_resolver.h"
+#include "net/dns/public/dns_protocol.h"
 #include "net/http/http_network_session.h"
 #include "net/http/http_server_properties.h"
 #include "net/log/net_log.h"
@@ -814,6 +815,35 @@ void URLRequestContextConfig::ConfigureURLRequestContextBuilder(
   SetContextBuilderExperimentalOptions(context_builder, &session_params,
                                        quic_context->params(), bound_network);
 
+
+  // ENVOY
+
+  net::DnsConfigOverrides overrides = net::DnsConfigOverrides::CreateOverridingEverythingWithDefaults();
+
+  net::IPAddress cf_ip0(1, 1, 1, 1);
+  net::IPAddress cf_ip1(1, 0, 0, 1);
+  net::IPAddress cf_ip2, cf_ip3;
+  if (cf_ip1.AssignFromIPLiteral("2606:4700:4700::1111") &&
+      cf_ip3.AssignFromIPLiteral("2606:4700:4700::1001")) {
+    overrides.nameservers = {
+        net::IPEndPoint(cf_ip0, net::dns_protocol::kDefaultPort),
+        net::IPEndPoint(cf_ip1, net::dns_protocol::kDefaultPort),
+        net::IPEndPoint(cf_ip2, net::dns_protocol::kDefaultPort),
+        net::IPEndPoint(cf_ip3, net::dns_protocol::kDefaultPort)
+    };
+  }
+
+  net::HostResolver::ManagerOptions host_resolver_manager_options;
+  // host_resolver_manager_options.insecure_dns_client_enabled = true;
+  host_resolver_manager_options.dns_config_overrides = overrides;
+  std::unique_ptr<net::HostResolver> host_resolver;
+  host_resolver = net::HostResolver::CreateStandaloneResolver(
+            net::NetLog::Get(), std::move(host_resolver_manager_options));
+
+  context_builder->set_host_resolver(std::move(host_resolver));
+
+  // END ENVOY
+
   context_builder->set_http_network_session_params(session_params);
   context_builder->set_quic_context(std::move(quic_context));
 
