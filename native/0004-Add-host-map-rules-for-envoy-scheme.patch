From: h <h@localhost>
Date: Fri, 14 Feb 2020 03:58:32 +0000
Subject: [PATCH 1/1] Add host map rules for envoy scheme

---
 components/cronet/native/sample/main.cc        | 13 +++++++++++--
 net/url_request/url_request_context_builder.cc | 23 ++++++++++++++++++++++-
 2 files changed, 33 insertions(+), 3 deletions(-)

--- a/components/cronet/native/sample/main.cc
+++ b/components/cronet/native/sample/main.cc
@@ -14,8 +14,17 @@ Cronet_EnginePtr CreateCronetEngine() {
   Cronet_EngineParams_user_agent_set(engine_params, "CronetSample/1");
   Cronet_EngineParams_envoy_url_set(engine_params,
                                     "https://example.com/envoy_path/");
-  // Cronet_EngineParams_envoy_url_set(engine_params,
-  // "envoy://?url=https%3A%2F%2Fexample.com%2Fenvoy_path%2F%3Fk1%3Dv1&header_Host=subdomain.example.com");
+  Cronet_EngineParams_envoy_url_set(
+      engine_params,
+      "envoy://"
+      "?url=https%3A%2F%2Fexample.com%2Fenvoy_path%2F%3Fk1%3Dv1&header_Host="
+      "subdomain.example.com&resolve=MAP%20example.com%201.2.3.4");
+  // only MAP url-host to address
+  Cronet_EngineParams_envoy_url_set(
+      engine_params,
+      "envoy://"
+      "?url=https%3A%2F%2Fexample.com%2Fenvoy_path%2F%3Fk1%3Dv1&header_Host="
+      "subdomain.example.com&address=1.2.3.4");
   Cronet_EngineParams_enable_quic_set(engine_params, true);
 
   Cronet_Engine_StartWithParams(cronet_engine, engine_params);
--- a/net/url_request/url_request_context_builder.cc
+++ b/net/url_request/url_request_context_builder.cc
@@ -20,6 +20,7 @@
 #include "net/base/cache_type.h"
 #include "net/base/net_errors.h"
 #include "net/base/network_delegate_impl.h"
+#include "net/base/url_util.h"
 #include "net/cert/cert_verifier.h"
 #include "net/cert/ct_log_verifier.h"
 #include "net/cert/ct_policy_enforcer.h"
@@ -29,6 +30,7 @@
 #include "net/cookies/cookie_monster.h"
 #include "net/dns/host_resolver.h"
 #include "net/dns/host_resolver_manager.h"
+#include "net/dns/mapped_host_resolver.h"
 #include "net/http/http_auth_handler_factory.h"
 #include "net/http/http_cache.h"
 #include "net/http/http_network_layer.h"
@@ -417,7 +419,26 @@ std::unique_ptr<URLRequestContext> URLRe
     }
   }
   host_resolver_->SetRequestContext(context.get());
-  storage->set_host_resolver(std::move(host_resolver_));
+
+  auto envoy_url = GURL(envoy_url_);
+  std::string value;
+  GetValueForKeyInQuery(envoy_url, "url", &value);
+  // TODO assert value
+  auto url = GURL(value);
+
+  if (GetValueForKeyInQuery(envoy_url, "resolve", &value)) {
+    std::unique_ptr<net::MappedHostResolver> remapped_resolver(
+        new net::MappedHostResolver(std::move(host_resolver_)));
+    remapped_resolver->SetRulesFromString(value);
+    storage->set_host_resolver(std::move(remapped_resolver));
+  } else if (GetValueForKeyInQuery(envoy_url, "address", &value)) {
+    std::unique_ptr<net::MappedHostResolver> remapped_resolver(
+        new net::MappedHostResolver(std::move(host_resolver_)));
+    remapped_resolver->SetRulesFromString("MAP " + url.host() + " " + value);
+    storage->set_host_resolver(std::move(remapped_resolver));
+  } else {
+    storage->set_host_resolver(std::move(host_resolver_));
+  }
 
   if (ssl_config_service_) {
     storage->set_ssl_config_service(std::move(ssl_config_service_));
